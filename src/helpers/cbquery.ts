import { bot } from './telegram/bot';
import axios from 'axios';
import db from './database';
import { IUser } from './database';
import { typeUrlParser } from './parser/typeUrlParser';
import { addTracks } from './tracker/addTracks';
import { errorMsg } from './errorMessage';
import addComment from './tracker/addComment';

let currentTrackNumber = '';

export default () =>
  bot.on('callback_query', async (query) => {
    const { data, from } = query;
    const id = from.id;
    switch (data) {
      case 'addLink': {
        const promptLink = await bot.sendMessage(
          id,
          '‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏–ø–∞ - https://kufar.by/l/–≥–æ—Ä–æ–¥/—Ç–æ–≤–∞—Ä/',
          {
            reply_markup: {
              force_reply: true,
              input_field_placeholder: 'https://kufar.by/l/–≥–æ—Ä–æ–¥/—Ç–æ–≤–∞—Ä/',
            },
          },
        );
        const { message_id } = promptLink;
        bot.onReplyToMessage(id, message_id, async (message) => {
          const { entities, text, from } = message;
          if (entities?.[0].type === 'url') {
            try {
              if (text) {
                await axios.get(text);
                await typeUrlParser(text, from as IUser);
                await db.setUrlUser(text, from as IUser);
                bot.sendMessage(
                  id,
                  'üéØ –í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!',
                );
              }
            } catch (error) {
              errorMsg(
                id,
                'üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                'link',
              );
            }
          } else {
            errorMsg(
              id,
              'üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
              'link',
            );
          }
        });
        break;
      }
      case 'changeLink': {
        const promptLink = await bot.sendMessage(
          from.id,
          '‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è - https://kufar.by/l/–≥–æ—Ä–æ–¥/—Ç–æ–≤–∞—Ä/',
          {
            reply_markup: {
              force_reply: true,
              input_field_placeholder: 'https://kufar.by/l/–≥–æ—Ä–æ–¥/—Ç–æ–≤–∞—Ä/',
            },
          },
        );
        const { message_id } = promptLink;
        bot.onReplyToMessage(id, message_id, async (message) => {
          const { entities, text, from } = message;
          if (entities?.[0].type === 'url') {
            try {
              if (text) {
                await db.removeAds(id.toString());
                await axios.get(text);
                await typeUrlParser(text, from as IUser);
                await db.setUrlUser(text, from as IUser);
                bot.sendMessage(
                  id,
                  'üéØ –í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!',
                );
              }
            } catch (error) {
              errorMsg(
                id,
                'üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                'link',
              );
            }
          } else {
            errorMsg(
              id,
              'üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
              'link',
            );
          }
        });
        break;
      }
      case 'addTrack': {
        const promptTrack = await bot.sendMessage(
          id,
          '‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏–ø–∞ - <b>BY080012345678</b>',
          {
            reply_markup: {
              force_reply: true,
              input_field_placeholder: 'BY080012345678',
            },
            parse_mode: 'HTML',
          },
        );

        const { message_id } = promptTrack;
        bot.onReplyToMessage(id, message_id, async (message) => {
          const msg = message.text ?? '';
          const dataTrack = await addTracks(msg);
          if ('error' in dataTrack) {
            errorMsg(
              id,
              `üôÖ‚Äç‚ôÇÔ∏è –£–ø—Å! —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ${dataTrack.errorMessage}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`,
              'track',
            );
          } else {
            await db.setTrack(dataTrack, id.toString());
            bot.sendMessage(
              id,
              'üçÄ –£—Å–ø–µ—à–Ω–æ! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å, –æ —á–µ–º –∏–¥–µ—Ç —Ä–µ—á—å, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É. (–ë—É–∫–≤–∞–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤).',
            );
            currentTrackNumber = dataTrack.trackNumber;
            await addComment(id.toString());
          }
        });
        break;
      }
      case 'addComment': {
        const promptComment = await bot.sendMessage(
          id,
          '‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö —Å–ª–æ–≤.',
          {
            reply_markup: {
              force_reply: true,
              input_field_placeholder: 'C–º–∞—Ä—Ç—Ñ–æ–Ω',
            },
          },
        );

        const { message_id } = promptComment;
        bot.onReplyToMessage(id, message_id, async (message) => {
          const msg = message.text ?? '';
          await db.add–°omment(id.toString(), currentTrackNumber, msg);
          await bot.sendMessage(
            id,
            'üéØ –í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!',
          );
        });
        break;
      }
      case 'remove': {
        await db.removeUser(id.toString());
        await bot.sendMessage(
          id,
          'üëå –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.',
        );
        break;
      }
      case 'back': {
        bot.sendMessage(
          id,
          'üìë –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. –î–ª—è  —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ú–µ–Ω—é</b>.\n–ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.',
          { parse_mode: 'HTML' },
        );
        break;
      }
    }
  });
