import { bot } from '../bot';
import db from '../../database';
import { IUser, ICollection } from '../../tasks/parseKufar';

export async function commandStop(
  users: ICollection<IUser>,
  usersIds: string[],
) {
  bot.onText(/\/stop/, async (ctx) => {
    users = await db.getUsers();
    usersIds = users ? Object.keys(users) : [];
    const { id } = ctx.chat;
    if (usersIds.includes(id.toString())) {
      await bot.sendMessage(
        id,
        '‚ö†Ô∏è –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏! –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: ' ‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞', callback_data: 'removeUser' }],
              [
                {
                  text: ' üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Kufar',
                  callback_data: 'stopParseAds',
                },
              ],
              [{ text: ' ‚óÄ –ù–∞–∑–∞–¥', callback_data: 'back' }],
            ],
          },
        },
      );
    } else {
      bot.sendMessage(
        id,
        'üòü –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <a>/start</a>',
        { parse_mode: 'HTML' },
      );
    }
  });
}
