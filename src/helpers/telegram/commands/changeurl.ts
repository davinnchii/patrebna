import { bot } from '../bot';
import axios from 'axios';
import db from '../../database';
import { IUser } from '../../database';
import { typeUrlParser } from '../../typeUrlParser';

export async function commandChangeurl(): Promise<void> {
  bot.onText(/\/changeurl/, (ctx1) => {
    const { id } = ctx1.chat;

    bot.sendMessage(id, 'üí¨ –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É?', {
      reply_markup: {
        inline_keyboard: [[{ text: ' üëå –î–∞, —Ö–æ—á—É!', callback_data: 'reply' }]],
      },
    });

    bot.on('callback_query', async (query) => {
      const promptLink = await bot.sendMessage(
        id,
        '‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏–ø–∞ - https://kufar.by/l/–≥–æ—Ä–æ–¥/—Ç–æ–≤–∞—Ä/',
        {
          reply_markup: {
            force_reply: true,
          },
        },
      );
      const { message_id } = promptLink;
      bot.onReplyToMessage(id, message_id, async (message) => {
        const { entities, text, from } = message;
        if (entities?.[0].type === 'url') {
          try {
            if (text) {
              await db.removeAds(id.toString());
              await axios.get(text);
              await typeUrlParser(text, from as IUser);
              await db.setUrlUser(text, from as IUser);
              bot.sendMessage(
                id,
                'üéØ –í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!',
              );
            }
          } catch (error) {
            console.log(error);
          }
        }
      });
    });
  });
}
